4/26/12 - Justin Ward
-NimGameConsoleLoop
	-Refactored our NimGameConsoleLoop and made it more flexible, thus the rename to GameConsoleLoop.
You add MenuItems from outside the class, assigning a parameterless method as the response to
the user choosing that option, and a Trigger which is the int which is the Input by the user.
This refactor allows this class to be used for potentially any game, provided the response methods
are parameterless, this is a small change however.

	-BEFORE:
		
class NimGameConsoleLoop
{
	public bool Run(Game game)
	{
		Console.Clear();

		Console.WriteLine("Option 1 - Player versus AI");
		Console.WriteLine("Option 2 - AI versus AI");
		Console.WriteLine("Option 3 - Shutdown");

		int menuChoiceIndex = UserConsoleInput.ForceConsoleIntegerInput("Select an Option: ", "Invalid Input. ", 1, 3);

		if (menuChoiceIndex == 1)
		{
			game.RunPlayerVersusAIGame();
			Console.ReadLine();
			return true;
		}
		else if (menuChoiceIndex == 2)
		{
			int numberOfGames = UserConsoleInput.ForceConsoleIntegerInput("How many games? ", "Invalid Input. ", 1, 1000000);

			for (int i = 0; i < numberOfGames; i++)
				game.RunAIVersusAIGame();

			Console.ReadLine();
			return true;
		}
		else return false;
	}
}

	-AFTER:
class GameConsoleLoop
{
	private List<MenuItem> Menu;
	private bool running;

	public GameConsoleLoop()
	{
		Menu = new List<MenuItem>();
		running = true;
	}

	public void AddMenuItem(MenuItem itemToAdd)
	{
		Menu.Add(itemToAdd);
	}

	public bool Run()
	{
		Console.Clear();

		foreach (var m in Menu)
		{
			m.PrintPrompt();
		}

		int menuInput = UserConsoleInput.ForceConsoleIntegerInput("Select an Option: ", "Invalid Input. ", 1, 3);
		
		foreach (var m in Menu)
		{
			if (menuInput == m.Trigger)
			{
				m.Execute();
			}
		}

		return running;
	}

	public void End()
	{
		running = false;
	}
}

4/23/13 - Kevin Teynor
- Game.cs
	- Added class-level property to check if the game is over, instead of directly looking into the board state inside the game loop.

	- BEFORE:
		public void RunPlayerVersusAIGame()
        {
            ...
            do
            {
                ...
            }
            while (GameState.TotalLeft > 0);
        }

        public void RunAIVersusAIGame()
        {
            ...
            do
            {
                ...
            }
            while (GameState.TotalLeft > 0);
        }
	
	- AFTER: 
		public void RunPlayerVersusAIGame()
        {
            ...
            do
            {
                ...
            }
            while (Playing);
        }

        public void RunAIVersusAIGame()
        {
            ...
            do
            {
                ...
            }
            while (Playing);
        }

4/23/13 - Kevin Teynor
- BoardState.cs
	- Added "EmptyBoardState" function to use in place of null comparisons.
	- implemented into the LearningAI class.

	- BEFORE:
		         public BoardState TakeTurn(BoardState currentState)
				 {
        		     BoardState moveToMake = null;
		 
					 Random random = new Random();
					 foreach(var b in NimLogic.GetAllValidMoves(currentState, BoardStateCatalog))
					 {
        		         if (moveToMake == null)
        		             moveToMake = new BoardState(b);
        		         else if (b.StateValue > moveToMake.StateValue)
							 moveToMake = new BoardState(b);
						 else if (b.StateValue == moveToMake.StateValue)
							 if(random.Next(2) == 0) moveToMake = new BoardState(b);
					 }
		 
					if (moveToMake == null)
						throw new Exception("No valid moves-- board state has to be <0, 0, 0>, at which point this method should not have been called.");
		 
					 return moveToMake;
				 }
	- AFTER:
				public static BoardState EmptyBoardState()
				{
					BoardState emptyBoard = new BoardState();
					emptyBoard.RowCounts[0] = 0;
					emptyBoard.RowCounts[1] = 0;
					emptyBoard.RowCounts[2] = 0;
					emptyBoard.StateValue = -1000;
		
					return emptyBoard;
				}
		
				public BoardState TakeTurn(BoardState currentState)
				{
        		    BoardState moveToMake = BoardState.EmptyBoardState();
		
					Random random = new Random();
					foreach(var b in NimLogic.GetAllValidMoves(currentState, BoardStateCatalog))
					{
        		        if (b.StateValue > moveToMake.StateValue)
							moveToMake = new BoardState(b);
						else if (b.StateValue == moveToMake.StateValue)
							if(random.Next(2) == 0) moveToMake = new BoardState(b);
					}
					
					return moveToMake;
				}


4/19/13 - Kevin Teynor
- BoardState.cs
	- fixed constructors to set-up the array of RowCounts so the rest of the code actually works.
- NimGameConsoleLoop
	- renamed a variable for clearer intention.


4/19/13 - Kevin Teynor

- BoardState.cs
	- completely removed previous "RowA/B/C" references from all code, replaced with references to the RowCounts[] array.
	- renamed variables inside ApplyNewData() to make meaning easier to interpret.
	- compressed PrintBoard() function to remove reused code for different rows. Allows scaleability for more than 3 rows.
	- renamed variables in Equals() to be less confusing.
	- overrode the Boardstate.Equals(BoardState) for better efficiency, used it in the .Equals(Object) function.
	- changed equallity checking logic to account for more than a 3-wide board.
