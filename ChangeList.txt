Group 3 - Learning Nim Game Change Log

12:00 PM 4/15/2013 - Justin Ward

Start:

Added NimLogic.cs as a public static class for containing all methods which check and use Logic specific to the game of Nim.
This class will be an example of Logical Cohesion, storing methods together that are related logically. Methods will
be extracted from Game.cs and BoardState.cs into this class, where logical.

:End

12:12 PM 4/15/2013 - Justin Ward

Start:


//Moved to NimLogic.cs as IsMoveValid(BoardState bs1, BoardState bs2);
//public bool checkIfValid(BoardState change)
//{
//    if (this.RowACount > change.RowACount && (change.RowBCount == this.RowBCount && change.RowCCount == this.RowCCount))
//        return true;
//    if (this.RowBCount > change.RowBCount && (change.RowACount == this.RowACount && change.RowCCount == this.RowCCount))
//        return true;
//    if (this.RowCCount > change.RowCCount && (change.RowACount == this.RowACount && change.RowBCount == this.RowBCount))
//        return true;
//
//    return false;
//}


Moved checkIfValid from BoardState into NimLogic.cs as IsMoveValid. This move was made to make the intentions of the method
more obvious, and to place it where it logically belongs. A BoardState object should not perform a check for a valid
move from one state to another, it is merely a container for state information, not the rules of the game.

I changed the method to be static as it is contained within the static class NimLogic. This will allow this simple check,
which is likely to be used frequently, to be accessed throughout the program.

/// <summary>
/// In Nim a valid move is defined as removing from 1 to all tokens from 1 row,
/// this methods verifies that the difference between the first parameter
/// and the second constitutes a valid move.
/// </summary>
/// <param name="currentState">The current state of the game board</param>
/// <param name="proposedState">The state which an AI or Player's move will result in</param>
/// <returns>If the move the AI or Player is making is valid</returns>
public static bool IsMoveValid(BoardState currentState, BoardState proposedState)
	{
            if (currentState.RowACount > proposedState.RowACount &&
                proposedState.RowACount >= 0)
            {
                if (currentState.RowBCount == proposedState.RowBCount &&
                    currentState.RowCCount == proposedState.RowCCount) return true;
            }

            if (currentState.RowBCount > proposedState.RowBCount &&
                proposedState.RowBCount >= 0)
            {
                if (currentState.RowACount == proposedState.RowACount &&
                    currentState.RowCCount == proposedState.RowCCount) return true;
            }

            if (currentState.RowCCount > proposedState.RowCCount &&
                proposedState.RowCCount >= 0)
            {
                if (currentState.RowACount == proposedState.RowACount &&
                    currentState.RowBCount == proposedState.RowBCount) return true;
   	    }

   		return false;
	}

:End